<?xml version="1.0" encoding="utf-8"?>
<problem
    package="unix.socket"
    id="inetd"
    type="standard">
  <statement language="ru_RU">
    <description>
        <p>Напишите программу <code>caos_inetd</code>, реализующую часть функциональности
            "суперсервера" <a href="https://en.wikipedia.org/wiki/Inetd"><code>inetd</code></a>.</p>
        <p>Программа запускается с такими аргументами:</p>
        <pre>caos_inetd PORT CMD [ARGS...]</pre>
        <p>Программа создаёт TCP/IPv6-сокет и начинает принимать входящие соединения на порту,
        соответствующем параметру PORT.</p>
    <p>Установив очередное соединение, <code>caos_inetd</code> запускает
        в отдельном процессе команду <code>CMD ARGS...</code>, у которой соединение
            подключено к <code>stdin</code> и <code>stdout</code>.</p>
        <p>Например, можно запустить суперсервер так:</p>
        <pre>$ ./caos_inetd 3000 grep good</pre>
        <p>и входящие соединения будет обрабатывать команда grep good:</p>
        <pre>$ echo -e 'good1\nbad2' | nc ::1 3000
good1
$ echo -e 'good1\nbad2' | nc -q0 ::1 3000  # если предыдущая команда зависает
good1</pre>
        <p>При поступлении сигнала SIGTERM программа должна остановить всех детей, дождаться их завершения и завершиться с кодом 0.
           Допускается race condition около вызова accept. Считайте, что запущенные процессы завершаются при получении SIGTERM (не игнорируют и не блоуируют его).</p>
        <p>Следите, чтобы ни у каких процессов не оставалось лишних
        файловых дескрипторов, а у процесса-родителя не накапливались дети-зомби.</p>

        <p>Не забывайте устанавливать опцию SO_REUSEADDR!</p>

        <p>Используйте для listen значение backlog >= 5.</p>
    </description>
  </statement>
  <review_notes>
    <p>Как решить проблему с зомби:</p>
    <ul>
      <li>Игнорировать SIGCHLD.</li>
      <li>Использовать sigaction с SA_NOCLDWAIT.</li>
      <li>Установить обработчик с <code>while(waitpid(-1, NULL, WNOHANG) > 0) {}</code>.</li>
    </ul>
    <p>Использовать в обработчике одиночный wait или увеличивать какой-нибудь счётчик нельзя, т.к. сигналы могут объединяться.</p>
  </review_notes>
  <review_comments>
    <comment>Одинаковые сигналы, пришедшие почти одновременно (в том числе SIGCHLD), могут объединяться.
    Используйте в обработчике цикл с неблокирующим waitpid.</comment>
  </review_comments>
</problem>
